<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.8.6">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2019-11-17T23:26:27+08:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">一只草履虫</title><subtitle>Your Site Description
</subtitle><author><name>Your Name</name></author><entry><title type="html">用与非门实现CPU的数理基础</title><link href="http://localhost:4000/2019/10/17/%E7%94%A8%E4%B8%8E%E9%9D%9E%E9%97%A8%E5%AE%9E%E7%8E%B0CPU%E7%9A%84%E6%95%B0%E7%90%86%E5%9F%BA%E7%A1%80.html" rel="alternate" type="text/html" title="用与非门实现CPU的数理基础" /><published>2019-10-17T00:00:00+08:00</published><updated>2019-10-17T00:00:00+08:00</updated><id>http://localhost:4000/2019/10/17/%E7%94%A8%E4%B8%8E%E9%9D%9E%E9%97%A8%E5%AE%9E%E7%8E%B0CPU%E7%9A%84%E6%95%B0%E7%90%86%E5%9F%BA%E7%A1%80</id><content type="html" xml:base="http://localhost:4000/2019/10/17/%E7%94%A8%E4%B8%8E%E9%9D%9E%E9%97%A8%E5%AE%9E%E7%8E%B0CPU%E7%9A%84%E6%95%B0%E7%90%86%E5%9F%BA%E7%A1%80.html">&lt;h3 id=&quot;布尔函数&quot;&gt;布尔函数&lt;/h3&gt;

&lt;p&gt;布尔函数：布尔函数处理布尔数值(二进制数值)。布尔函数描述如何基于对布尔输入的某种逻辑计算确定布尔值输出，它们在复杂性理论的问题和数字计算机的芯片设计中扮演基础角色。&lt;/p&gt;

&lt;p&gt;布尔函数的表示是方法：&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;真值表：枚举出函数所有输入变量的组合，然后写出每一种组合对应的函数输出值。
&lt;img src=&quot;/post_image/bool_funtion/trueTable.png&quot; alt=&quot;&quot; /&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;center&gt;真值表&lt;/center&gt;

&lt;ol&gt;
  &lt;li&gt;布尔表达式：使用布尔操作符（And-与，Or-或，Not-非）表达，上面的真值表可以用此表达式表示：&lt;/li&gt;
&lt;/ol&gt;

&lt;center&gt;f(x, y, z) = (x And y) Or (Not(x) And z)&lt;/center&gt;

&lt;h3 id=&quot;布尔函数和门&quot;&gt;布尔函数和门&lt;/h3&gt;
&lt;p&gt;门（gate）是用来实现布尔函数的物理设备，例如我们常说的与门，或门，非门，与非门等。门是基本的电子元器件，复杂的门电路就构成了我们所说的CPU
&lt;img src=&quot;/post_image/bool_funtion/gates.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;门有输入管脚和输出管脚，对应着布尔函数的入参和出参；门电路的具体实现方式则对应着布尔函数的运算规则。复杂的布尔函数就对应的复杂的门电路
&lt;img src=&quot;/post_image/bool_funtion/gates_funtion_map.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;布尔函数是门电路的数学表达，门电路是布尔函数的物理实现。因此我们可以说CPU的实现是建立在布尔函数之上的&lt;/p&gt;

&lt;h3 id=&quot;用与非门实现cpu的数理基础&quot;&gt;用与非门实现CPU的数理基础&lt;/h3&gt;

&lt;p&gt;布尔函数的一些数学结论：&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;任何一个布尔函数，无论多复杂，都可以只用三种布尔操作符And，Or，Not完全表达&lt;/li&gt;
  &lt;li&gt;And，Or，Not运算都可以只用Nand（与非运算）一种运算来代替实现。或者只用Nor（或非运算）一种运算来实现&lt;/li&gt;
  &lt;li&gt;由1、2可得：仅使用Nand运算，就能够构建任何布尔函数
以上证明方式可以自行Google&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;有了上面的数理基础做支撑，所以我们可以得出结论：我们一旦在物理上实现了Nand（与非门），我们就能够实现任何元器件，进而实现一个CPU。所以说：give you a Nand, Go build a computer&lt;/p&gt;

&lt;h3 id=&quot;用软件实现硬件&quot;&gt;用软件实现硬件&lt;/h3&gt;

&lt;p&gt;今天，硬件设计者们也不在亲手制作硬件，而是用软件来实现设计：通过编写硬件描述语言（HDL）来描述芯片结构，并能通过测试来验证设计。
下图是一个硬件仿真器
&lt;img src=&quot;/post_image/bool_funtion/simulator.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;</content><author><name>Your Name</name></author><category term="计算机基础" /><summary type="html">布尔函数 布尔函数：布尔函数处理布尔数值(二进制数值)。布尔函数描述如何基于对布尔输入的某种逻辑计算确定布尔值输出，它们在复杂性理论的问题和数字计算机的芯片设计中扮演基础角色。 布尔函数的表示是方法： 真值表：枚举出函数所有输入变量的组合，然后写出每一种组合对应的函数输出值。 真值表 布尔表达式：使用布尔操作符（And-与，Or-或，Not-非）表达，上面的真值表可以用此表达式表示： f(x, y, z) = (x And y) Or (Not(x) And z) 布尔函数和门 门（gate）是用来实现布尔函数的物理设备，例如我们常说的与门，或门，非门，与非门等。门是基本的电子元器件，复杂的门电路就构成了我们所说的CPU 门有输入管脚和输出管脚，对应着布尔函数的入参和出参；门电路的具体实现方式则对应着布尔函数的运算规则。复杂的布尔函数就对应的复杂的门电路 布尔函数是门电路的数学表达，门电路是布尔函数的物理实现。因此我们可以说CPU的实现是建立在布尔函数之上的 用与非门实现CPU的数理基础 布尔函数的一些数学结论： 任何一个布尔函数，无论多复杂，都可以只用三种布尔操作符And，Or，Not完全表达 And，Or，Not运算都可以只用Nand（与非运算）一种运算来代替实现。或者只用Nor（或非运算）一种运算来实现 由1、2可得：仅使用Nand运算，就能够构建任何布尔函数 以上证明方式可以自行Google 有了上面的数理基础做支撑，所以我们可以得出结论：我们一旦在物理上实现了Nand（与非门），我们就能够实现任何元器件，进而实现一个CPU。所以说：give you a Nand, Go build a computer 用软件实现硬件 今天，硬件设计者们也不在亲手制作硬件，而是用软件来实现设计：通过编写硬件描述语言（HDL）来描述芯片结构，并能通过测试来验证设计。 下图是一个硬件仿真器</summary></entry><entry><title type="html">从与非门到俄罗斯方块</title><link href="http://localhost:4000/2019/10/16/%E4%BB%8E%E4%B8%8E%E9%9D%9E%E9%97%A8%E5%88%B0%E4%BF%84%E7%BD%97%E6%96%AF%E6%96%B9%E5%9D%97.html" rel="alternate" type="text/html" title="从与非门到俄罗斯方块" /><published>2019-10-16T00:00:00+08:00</published><updated>2019-10-16T00:00:00+08:00</updated><id>http://localhost:4000/2019/10/16/%E4%BB%8E%E4%B8%8E%E9%9D%9E%E9%97%A8%E5%88%B0%E4%BF%84%E7%BD%97%E6%96%AF%E6%96%B9%E5%9D%97</id><content type="html" xml:base="http://localhost:4000/2019/10/16/%E4%BB%8E%E4%B8%8E%E9%9D%9E%E9%97%A8%E5%88%B0%E4%BF%84%E7%BD%97%E6%96%AF%E6%96%B9%E5%9D%97.html">&lt;p&gt;&lt;img src=&quot;/post_image/nand_start/adam_god_nand.png&quot; alt=&quot;adam_god_nand&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Mark!!! 今天开始苦练基本功：&lt;a href=&quot;https://www.nand2tetris.org/&quot;&gt;From Nand To Tetris&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;😀😀😀&lt;/p&gt;</content><author><name>Your Name</name></author><category term="计算机基础" /><summary type="html">Mark!!! 今天开始苦练基本功：From Nand To Tetris 😀😀😀</summary></entry></feed>